diff -uNr dependency-track-4.12.0.orig/src/main/java/org/dependencytrack/tasks/scanners/TrivyAnalysisTask.java dependency-track-4.12.0/src/main/java/org/dependencytrack/tasks/scanners/TrivyAnalysisTask.java
--- dependency-track-4.12.0.orig/src/main/java/org/dependencytrack/tasks/scanners/TrivyAnalysisTask.java	2024-10-02 16:09:50.987372889 +0900
+++ dependency-track-4.12.0/src/main/java/org/dependencytrack/tasks/scanners/TrivyAnalysisTask.java	2024-10-02 16:41:53.756624163 +0900
@@ -195,6 +195,13 @@
 
         for (final Component component : components) {
             if (component.getPurl() != null) {
+
+                // ###### [START] Workaround of version handing for rpm (and deb ?)
+                // ### (1) Set boolean if the component's type is "rpm" or "deb".
+                final boolean is_rpm = component.getPurl().getType().equals("rpm") ? true : false;
+                final boolean is_deb = component.getPurl().getType().equals("deb") ? true : false;
+                // ###### [END]
+
                 var appType = PurlType.getApp(component.getPurl().getType());
 
                 var name = component.getName();
@@ -206,7 +213,18 @@
                 if (!PurlType.UNKNOWN.getAppType().equals(appType)) {
                     if (!PurlType.Constants.PACKAGES.equals(appType)) {
                         final Application.Builder app = apps.computeIfAbsent(appType, Application.newBuilder()::setType);
-                        final String key = name + ":" + component.getVersion();
+
+                        // ###### [START] Workaround of version handing for rpm (and deb ?)
+                        // ### (1) If there is a string that corresponds to "Epoch", remove it.
+                        // #   buf = "1:2.3.4-5.el9" -> buf = "2.3.4-5.el9"
+                        // ### (2) Concatenate with "Name".
+                        // #   final String key = name + ":" + buf
+                        String buf = component.getVersion();
+                        if (is_rpm || is_deb) {
+                            buf = buf.contains(":") ? buf.split(":")[1] : buf;
+                        }
+                        final String key = name + ":" + buf;
+                        // ###### [END]
 
                         LOGGER.debug("Add key %s to map".formatted(key));
                         map.put(key, component);
@@ -265,17 +283,69 @@
                         final PackageInfo.Builder pkg = pkgs.computeIfAbsent(pkgType, ignored -> PackageInfo.newBuilder());
 
                         versionKey += component.getVersion();
+
+                        // ###### [START] Workaround of version handing for rpm (and deb ?)
+                        // ### (1) If there is a string that corresponds to "Epoch", remove it. 
+                        // #   versionKey = "1:2.3.4-5.el9" -> versionKey = "2.3.4-5.el9"
+                        if (is_rpm || is_deb) {
+                            if (versionKey.contains(":")) {
+                                int n_versionKey = versionKey.split(":").length;
+                                versionKey = versionKey.contains(":") ? versionKey.split(":")[n_versionKey - 1] : versionKey;
+                            }
+                        }
+                        // ###### [END]
+
                         final String key = name + ":" + versionKey;
 
                         LOGGER.debug("Add key %s to map".formatted(key));
                         map.put(key, component);
                         LOGGER.debug("add package %s".formatted(component.toString()));
-                        final Package.Builder packageBuilder = Package.newBuilder()
-                                .setName(component.getName())
-                                .setVersion(component.getVersion())
-                                .setArch(arch != null ? arch : "x86_64")
-                                .setSrcName(srcName != null ? srcName : component.getName())
-                                .setSrcVersion(srcVersion != null ? srcVersion : component.getVersion());
+
+                        // ###### [START] Fix candidate of version handing for rpm (and deb ?)
+                        // ### (1) If there is a string that corresponds to "Epoch", remove it. 
+                        // #   buf = "1:2.3.4-5.el9" -> buf = "2.3.4-5.el9"
+                        // ### (2) Then, split into "Version" and "Release" ("Release" can be NULL)
+                        // #   buf = "2.3.4-5.el9" -> version = "2.3.4", release = "5.el9"
+                        // #   (buf = "2.3.4" -> version = "2.3.4", release = "")
+                        // ### (3) Set package information, adding "Release" to it. 
+                        String version = "";
+                        String release = "";
+                        String buf = component.getVersion();
+                        buf = buf.contains(":") ? buf.split(":")[1] : buf;
+                        if (is_rpm || is_deb) {
+                            if (buf.contains("-")) {
+                                String[] buf2 = buf.split("-");
+                                release = buf2[buf2.length - 1];
+                                for (int i = 0; i < buf2.length - 1; i++) {
+                                    version += buf2[i];
+                                }
+                            }
+                            else {
+                                version = buf;
+                                release = "";
+                            }
+                        }
+
+                        final Package.Builder packageBuilder;
+                        if (is_rpm || is_deb) {
+                            packageBuilder = Package.newBuilder()
+                                    .setName(component.getName())
+                                    .setVersion(version != "" ? version : component.getVersion())
+                                    .setRelease(release != "" ? release : "")
+                                    .setArch(arch != null ? arch : "x86_64")
+                                    .setSrcName(srcName != null ? srcName : component.getName())
+                                    .setSrcVersion(srcVersion != null ? srcVersion : component.getVersion());
+                        }
+                        else {
+                            packageBuilder = Package.newBuilder()
+                                    .setName(component.getName())
+                                    .setVersion(component.getVersion())
+                                    .setArch(arch != null ? arch : "x86_64")
+                                    .setSrcName(srcName != null ? srcName : component.getName())
+                                    .setSrcVersion(srcVersion != null ? srcVersion : component.getVersion());
+                        }
+                        // ##### [END]
+
                         Optional.ofNullable(srcRelease).ifPresent(packageBuilder::setSrcRelease);
                         Optional.ofNullable(epoch).ifPresent(packageBuilder::setEpoch);
                         pkg.addPackages(packageBuilder);
@@ -338,7 +408,23 @@
         for (final Result result : input) {
             for (int idx = 0; idx < result.getVulnerabilitiesCount(); idx++) {
                 var vulnerability = result.getVulnerabilities(idx);
-                var key = vulnerability.getPkgName() + ":" + vulnerability.getInstalledVersion();
+
+                // ###### [START] Workaround of version handing for rpm (and deb ?)
+                // ### (1) If there is a string that corresponds to "Epoch", remove it. 
+                // #   buf = "1:2.3.4-5.el9" -> installed_version = "2.3.4-5.el9"
+                // ### (2) Concatenate "installed_version" with "Name".
+                // #   var key = vulnerability.getPkgName() + ":" + installed_version
+                String buf = vulnerability.getInstalledVersion();
+                String installed_version = "";
+                if (buf.contains(":")) {
+                    installed_version = buf.split(":")[1];
+                }
+                else {
+                    installed_version = buf;
+                }
+                var key = vulnerability.getPkgName() + ":" + installed_version;
+                // ###### [END]
+
                 LOGGER.debug("Searching key %s in map".formatted(key));
                 if (!super.isEnabled(ConfigPropertyConstants.SCANNER_TRIVY_IGNORE_UNFIXED) || vulnerability.getStatus() == 3) {
                     handle(components.get(key), vulnerability);
